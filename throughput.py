# A data processing pipeline consists of n services connected in a series
# where the output of the ith service serves as the input to the (i+1)th service.
# However, the processing units have varying latencies,
# and the throughput of the ith unit is represented by the array throughput[i] in messages per minute.
# The first service receives input through an API, and the nth service produces the final output.

# Each service can be scaled up independently,
# with the cost of scaling up the ith service one unit equal to scaling cost[i].
# After scaling up a service x times, it can process throughput[i]*(1 + x) messages per minute.

# Given the arrays throughput and scaling cost, both of size n,
# and an integer budget representing the budget available,
# determine the optimal scaling configuration for the services
# such that the throughput generated by the nih service is maximized.

import heapq

def getMaximumThroughput(throughput, scaling_cost, budget):
    # Write your code here
    throughput_heap = []
    
    for i, tp in enumerate(throughput):
        heapq.heappush(throughput_heap, (tp, i))
    
    while budget > 0:
        bottle_neck, index = heappop(throughput_heap)
        cost = scaling_cost[index]
        if cost > budget:
            return bottle_neck
        
        heapq.heappush(throughput_heap, (bottle_neck + throughput[index], index))
        budget -= cost
    
    return throughput_heap[0][0]